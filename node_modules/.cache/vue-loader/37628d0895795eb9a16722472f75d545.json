{"remainingRequest":"C:\\dev\\github\\StetsonFamilyDentistry\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\dev\\github\\StetsonFamilyDentistry\\src\\components\\Navbar\\Navbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\dev\\github\\StetsonFamilyDentistry\\src\\components\\Navbar\\Navbar.vue","mtime":1611012143273},{"path":"C:\\dev\\github\\StetsonFamilyDentistry\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\dev\\github\\StetsonFamilyDentistry\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\dev\\github\\StetsonFamilyDentistry\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\dev\\github\\StetsonFamilyDentistry\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { CollapseTransition } from 'vue2-transitions';\nimport NavbarToggleButton from './NavbarToggleButton';\nlet resizeTimeout;\nfunction resizeThrottler(actualResizeHandler) {\n  // ignore resize events as long as an actualResizeHandler execution is in the queue\n  if ( !resizeTimeout ) {\n    resizeTimeout = setTimeout(() => {\n      resizeTimeout = null;\n      actualResizeHandler();\n\n      // The actualResizeHandler will execute at a rate of 15fps\n    }, 66);\n  }\n}\n\nexport default {\n  name: 'navbar',\n  props: {\n    transparent: {\n      type: Boolean,\n      default: false\n    },\n    position: {\n      type: String,\n      default: 'relative'\n    },\n    menuClasses: {\n      type: [String, Object, Array]\n    },\n    colorOnScroll: {\n      type: Number,\n      default: 0\n    },\n    type: {\n      type: String,\n      default: 'white',\n      validator(value) {\n        return ['white', 'default', 'primary', 'danger', 'success', 'warning', 'info'].includes(value);\n      }\n    },\n  },\n  provide() {\n    return {\n      closeNavbar: this.close\n    }\n  },\n  components: {\n    CollapseTransition,\n    NavbarToggleButton\n  },\n  data() {\n    return {\n      showMenu: false,\n      extraNavClasses: '',\n      currentScrollValue: 0\n    }\n  },\n  computed: {\n    slotData(){\n      return {\n        toggle: this.toggle,\n        open: this.open,\n        close: this.close,\n        isToggled: this.showMenu\n      }\n    },\n    classes() {\n      let color = `bg-${this.type}`;\n      let navPosition = `navbar-${this.position}`;\n      let colorOnScrollTransparent = this.colorOnScroll && this.currentScrollValue < this.colorOnScroll;\n\n      if (this.position === 'fixed') {\n        navPosition = 'fixed-top';\n      }\n\n      return [\n        { 'navbar-transparent': (this.transparent || colorOnScrollTransparent) },\n        { [color]: (!this.transparent && this.colorOnScroll === 0) },\n        navPosition, this.extraNavClasses]\n    }\n  },\n  methods: {\n    setNav(value){\n      let docClasess = document.body.classList;\n      if(value){\n        docClasess.add('nav-open')\n      } else {\n        docClasess.remove('nav-open')\n      }\n      let isOpen = docClasess.contains('nav-open');\n      let eventToTrigger = isOpen ? 'open' : 'close';\n      this.showMenu = isOpen;\n      this.$emit(eventToTrigger)\n    },\n    toggle() {\n      this.setNav(!this.showMenu)\n    },\n    open(){\n      this.setNav(true);\n    },\n    close(){\n      if (this.showMenu === false) {\n        return\n      }\n      this.setNav(false);\n    },\n    handleScroll(){\n      let scrollValue = document.body.scrollTop || document.documentElement.scrollTop;\n      this.currentScrollValue = scrollValue;\n      if(this.colorOnScroll > 0 && scrollValue > this.colorOnScroll){\n        this.extraNavClasses = `bg-${this.type}`;\n      } else {\n        if(this.extraNavClasses){\n          this.extraNavClasses = ''\n        }\n      }\n    },\n    scrollListener() {\n      resizeThrottler(this.handleScroll)\n    }\n  },\n  mounted () {\n    document.addEventListener('scroll', this.scrollListener)\n  },\n  beforeDestroy () {\n    document.removeEventListener('scroll', this.scrollListener)\n  }\n}\n",{"version":3,"sources":["Navbar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmfile":"Navbar.vue","sourceRoot":"src/components/Navbar","sourcesContent":["<template>\r\n    <nav :class=\"classes\" class=\"navbar navbar-expand-lg\">\r\n        <div class=\"container\">\r\n            <div class=\"navbar-translate\">\r\n                <slot v-bind=\"slotData\"></slot>\r\n                <navbar-toggle-button :toggled=\"showMenu\" @click.native.stop=\"toggle\"></navbar-toggle-button>\r\n            </div>\r\n            <div class=\"collapse navbar-collapse show\"\r\n                 v-if=\"$slots['navbar-menu'] || $scopedSlots['navbar-menu']\"\r\n                 data-color=\"orange\"\r\n                 id=\"navigation\">\r\n                <ul class=\"navbar-nav\" :class=\"menuClasses\" v-click-outside=\"close\">\r\n                    <slot name=\"navbar-menu\" v-bind=\"slotData\"></slot>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n</template>\r\n<script>\r\n  import { CollapseTransition } from 'vue2-transitions';\r\n  import NavbarToggleButton from './NavbarToggleButton';\r\n  let resizeTimeout;\r\n  function resizeThrottler(actualResizeHandler) {\r\n    // ignore resize events as long as an actualResizeHandler execution is in the queue\r\n    if ( !resizeTimeout ) {\r\n      resizeTimeout = setTimeout(() => {\r\n        resizeTimeout = null;\r\n        actualResizeHandler();\r\n\r\n        // The actualResizeHandler will execute at a rate of 15fps\r\n      }, 66);\r\n    }\r\n  }\r\n\r\n  export default {\r\n    name: 'navbar',\r\n    props: {\r\n      transparent: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      position: {\r\n        type: String,\r\n        default: 'relative'\r\n      },\r\n      menuClasses: {\r\n        type: [String, Object, Array]\r\n      },\r\n      colorOnScroll: {\r\n        type: Number,\r\n        default: 0\r\n      },\r\n      type: {\r\n        type: String,\r\n        default: 'white',\r\n        validator(value) {\r\n          return ['white', 'default', 'primary', 'danger', 'success', 'warning', 'info'].includes(value);\r\n        }\r\n      },\r\n    },\r\n    provide() {\r\n      return {\r\n        closeNavbar: this.close\r\n      }\r\n    },\r\n    components: {\r\n      CollapseTransition,\r\n      NavbarToggleButton\r\n    },\r\n    data() {\r\n      return {\r\n        showMenu: false,\r\n        extraNavClasses: '',\r\n        currentScrollValue: 0\r\n      }\r\n    },\r\n    computed: {\r\n      slotData(){\r\n        return {\r\n          toggle: this.toggle,\r\n          open: this.open,\r\n          close: this.close,\r\n          isToggled: this.showMenu\r\n        }\r\n      },\r\n      classes() {\r\n        let color = `bg-${this.type}`;\r\n        let navPosition = `navbar-${this.position}`;\r\n        let colorOnScrollTransparent = this.colorOnScroll && this.currentScrollValue < this.colorOnScroll;\r\n\r\n        if (this.position === 'fixed') {\r\n          navPosition = 'fixed-top';\r\n        }\r\n\r\n        return [\r\n          { 'navbar-transparent': (this.transparent || colorOnScrollTransparent) },\r\n          { [color]: (!this.transparent && this.colorOnScroll === 0) },\r\n          navPosition, this.extraNavClasses]\r\n      }\r\n    },\r\n    methods: {\r\n      setNav(value){\r\n        let docClasess = document.body.classList;\r\n        if(value){\r\n          docClasess.add('nav-open')\r\n        } else {\r\n          docClasess.remove('nav-open')\r\n        }\r\n        let isOpen = docClasess.contains('nav-open');\r\n        let eventToTrigger = isOpen ? 'open' : 'close';\r\n        this.showMenu = isOpen;\r\n        this.$emit(eventToTrigger)\r\n      },\r\n      toggle() {\r\n        this.setNav(!this.showMenu)\r\n      },\r\n      open(){\r\n        this.setNav(true);\r\n      },\r\n      close(){\r\n        if (this.showMenu === false) {\r\n          return\r\n        }\r\n        this.setNav(false);\r\n      },\r\n      handleScroll(){\r\n        let scrollValue = document.body.scrollTop || document.documentElement.scrollTop;\r\n        this.currentScrollValue = scrollValue;\r\n        if(this.colorOnScroll > 0 && scrollValue > this.colorOnScroll){\r\n          this.extraNavClasses = `bg-${this.type}`;\r\n        } else {\r\n          if(this.extraNavClasses){\r\n            this.extraNavClasses = ''\r\n          }\r\n        }\r\n      },\r\n      scrollListener() {\r\n        resizeThrottler(this.handleScroll)\r\n      }\r\n    },\r\n    mounted () {\r\n      document.addEventListener('scroll', this.scrollListener)\r\n    },\r\n    beforeDestroy () {\r\n      document.removeEventListener('scroll', this.scrollListener)\r\n    }\r\n  }\r\n</script>\r\n<style>\r\n</style>\r\n"]}]}